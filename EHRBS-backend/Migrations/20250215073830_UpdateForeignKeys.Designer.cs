// <auto-generated />
using System;
using EHRBS_backend.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EHRBS_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250215073830_UpdateForeignKeys")]
    partial class UpdateForeignKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Appointments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DoctorsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatientsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorsId");

                    b.HasIndex("PatientsId");

                    b.HasIndex("TenantsId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.AuditLogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MedicalRecordsId")
                        .HasColumnType("uuid");

                    b.Property<string>("TableAffected")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordsId");

                    b.HasIndex("TenantsId");

                    b.HasIndex("UsersId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Billings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DoctorsId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatienId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatientsId")
                        .HasColumnType("uuid");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorsId");

                    b.HasIndex("PatientsId");

                    b.HasIndex("TenantsId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Doctors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ConsultationFee")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantsId");

                    b.HasIndex("UsersId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.MedicalRecords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DoctorsId")
                        .HasColumnType("uuid");

                    b.Property<string>("EncryptedData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptionKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatientsId")
                        .HasColumnType("uuid");

                    b.Property<int>("RecordType")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorsId");

                    b.HasIndex("PatientsId");

                    b.HasIndex("TenantsId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EncryptedMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Patients", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsuranceProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantsId");

                    b.HasIndex("UsersId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Tenants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Appointments", b =>
                {
                    b.HasOne("EHRBS_backend.Domain.Entities.Doctors", null)
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Patients", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Tenants", null)
                        .WithMany("Appointments")
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.AuditLogs", b =>
                {
                    b.HasOne("EHRBS_backend.Domain.Entities.MedicalRecords", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("MedicalRecordsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Tenants", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("TenantsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Users", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Billings", b =>
                {
                    b.HasOne("EHRBS_backend.Domain.Entities.Doctors", null)
                        .WithMany("Billings")
                        .HasForeignKey("DoctorsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Patients", null)
                        .WithMany("Billings")
                        .HasForeignKey("PatientsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Tenants", null)
                        .WithMany("Billings")
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Doctors", b =>
                {
                    b.HasOne("EHRBS_backend.Domain.Entities.Tenants", null)
                        .WithMany("Doctors")
                        .HasForeignKey("TenantsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Users", null)
                        .WithMany("Doctors")
                        .HasForeignKey("UsersId");

                    b.OwnsOne("EHRBS_backend.Domain.Entities.Availability", "Availability", b1 =>
                        {
                            b1.Property<Guid>("DoctorsId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Days")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("EndTime")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StartTime")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DoctorsId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorsId");
                        });

                    b.Navigation("Availability")
                        .IsRequired();
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.MedicalRecords", b =>
                {
                    b.HasOne("EHRBS_backend.Domain.Entities.Doctors", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Patients", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Tenants", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Patients", b =>
                {
                    b.HasOne("EHRBS_backend.Domain.Entities.Tenants", null)
                        .WithMany("Patients")
                        .HasForeignKey("TenantsId");

                    b.HasOne("EHRBS_backend.Domain.Entities.Users", null)
                        .WithMany("Patients")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Users", b =>
                {
                    b.HasOne("EHRBS_backend.Domain.Entities.Tenants", null)
                        .WithMany("Users")
                        .HasForeignKey("TenantsId");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Doctors", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Billings");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.MedicalRecords", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Patients", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Billings");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Tenants", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AuditLogs");

                    b.Navigation("Billings");

                    b.Navigation("Doctors");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EHRBS_backend.Domain.Entities.Users", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
